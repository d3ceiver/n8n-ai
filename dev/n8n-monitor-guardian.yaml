apiVersion: apps/v1
kind: Deployment
metadata:
  name: n8n-monitor-guardian
  namespace: ai
spec:
  replicas: 1
  selector:
    matchLabels:
      app: n8n-monitor-guardian
  template:
    metadata:
      labels:
        app: n8n-monitor-guardian
    spec:
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      serviceAccountName: default
      nodeSelector:
        kubernetes.io/hostname: "master"  # adjust as needed
      containers:
        - name: n8n-monitor-guardian
          image: alpine/k8s:1.28.3
          command: ["/bin/sh", "-c"]
          args:
            - |
              LOG_FILE="/tmp/n8n-guardian.log"
              MONITOR_DEPLOY="n8n-monitor"
              NAMESPACE="ai"
              HEARTBEAT_PORT=9999
              LAST_HEARTBEAT=$(date +%s)
              HOST_NODE=$(hostname)
              EXPECTED_NODE="master"

              echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC'): Guardian started on $HOST_NODE (host network)." | tee -a $LOG_FILE

              if [ "$HOST_NODE" != "$EXPECTED_NODE" ]; then
                echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC'): ⚠️ Not running on master, exiting." | tee -a $LOG_FILE
                sleep 3600
                exit 0
              fi

              # Heartbeat listener (logs source IP + responds with HTTP 200)
              (
                while true; do
                  echo "Listening on port $HEARTBEAT_PORT..." | tee -a $LOG_FILE
                  nc -lk -p $HEARTBEAT_PORT -e sh -c '
                    SRC_IP=$(echo $SOCAT_PEERADDR)
                    TIMESTAMP=$(date -u "+%Y-%m-%d %H:%M:%S UTC")
                    echo "$TIMESTAMP: ❤️ Heartbeat received from ${SRC_IP:-unknown}" | tee -a /tmp/n8n-guardian.log
                    echo -e "HTTP/1.1 200 OK\r\nContent-Length: 0\r\n\r\n"
                    date +%s > /tmp/last_beat
                  '
                done
              ) &

              # Guardian logic loop
              while true; do
                if [ -f /tmp/last_beat ]; then
                  LAST_HEARTBEAT=$(cat /tmp/last_beat)
                fi

                NOW=$(date +%s)
                DIFF=$((NOW - LAST_HEARTBEAT))

                POD_NAME=$(kubectl -n $NAMESPACE get pod -l app=$MONITOR_DEPLOY -o jsonpath='{.items[0].metadata.name}' 2>/dev/null)

                if [ -z "$POD_NAME" ]; then
                  echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC'): ⚠️ Monitor pod not found." | tee -a $LOG_FILE
                  sleep 10
                  continue
                fi

                if [ "$DIFF" -gt 180 ]; then
                  echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC'): 🚨 No heartbeat for ${DIFF}s, restarting pod $POD_NAME." | tee -a $LOG_FILE
                  kubectl -n $NAMESPACE delete pod "$POD_NAME" --grace-period=0 --force
                  echo $NOW > /tmp/last_beat
                fi

                sleep 5
              done
          ports:
            - containerPort: 9999
          resources:
            requests:
              cpu: 50m
              memory: 64Mi
            limits:
              cpu: 100m
              memory: 128Mi
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: monitor-guardian-role
  namespace: ai
rules:
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: monitor-guardian-binding
  namespace: ai
subjects:
  - kind: ServiceAccount
    name: default
    namespace: ai
roleRef:
  kind: Role
  name: monitor-guardian-role
  apiGroup: rbac.authorization.k8s.io


